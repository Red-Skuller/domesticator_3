#!/home/rdkibler/.conda/envs/michelangeneo/bin/python
# -*- coding: utf-8 -*-

###### input handling ######
#this happens first so it fails quickly if bad inputs are given
import argparse

parser = argparse.ArgumentParser(prog='domesticator3', description='A sophisticated codon optimizer for the discerning protein designer')

parser.add_argument("proteins", type=str, nargs="+", help="Either one or more fasta files containing one or more protein sequences or one or more pdb files")
parser.add_argument("vector", type=str, help="A genbank (.gb) file containing annotations in the domesticator format to control domesticator function")

parser.add_argument("--nstruct", type=int, default=10, help="number of times to repeat optimization before picking one to return. Default: %(default)d")
parser.add_argument("--max_tries", type=int, default=3, help="number of times to restart optimization before giving up if no solution is found. Default: %(default)d")

parser.add_argument('--version', action='version', version='%(prog)s alpha 1.0')

args = parser.parse_args()


###### finish imports ######

# Standard library imports
import copy

# Third party imports
from dnachisel import DnaOptimizationProblem, NoSolutionError
import Bio
import numpy as np

# Local application imports
from tools import input_parsing, product_analysis

###### load files ######
base_vector_record = input_parsing.load_vector_record(args.vector)
naive_vector_records = input_parsing.make_naive_vector_records(base_vector_record,args.proteins)

###### optimize ######
optimized_vector_records = []
for record in naive_vector_records:
	initial_problem = DnaOptimizationProblem.from_record(record)
	print(dir(initial_problem))
	solutions = []
	iteration = 0
	trial = 0
	while iteration < args.nstruct and trial < args.max_tries:
		try:
			print(f"iteration {iteration + 1}/{args.nstruct}")
			problem = copy.deepcopy(initial_problem)
			problem.resolve_constraints_by_random_mutations()
			problem.optimize()
			problem.resolve_constraints(final_check=True)
			solutions.append(problem)
			iteration += 1
		except NoSolutionError:
			print("no solution found. Retrying...")
			initial_problem.max_random_iters += 1000
			trial += 1

	scores = [solution.objectives_evaluations().scores_sum() for solution in solutions]
	best_idx = np.argmin(scores)
	best_solution = solutions[best_idx]

	print(best_solution.constraints_text_summary())
	print(best_solution.objectives_text_summary())
	optimized_vector_records.append(best_solution.to_record())



###### create reports and output ######

Bio.SeqIO.write(optimized_vector_records, "output.gb","genbank")
print("REPORT")
for optimized_vector_record in optimized_vector_records:
	polypeptides = product_analysis.find_polypeptides(optimized_vector_record)
	print(polypeptides)

	protein_params = product_analysis.get_params(polypeptides)
	protein_params.to_csv("translated_proteins.params")
	#TODO: Add support for detection of protease cleavage sites and printing of the fragment params






# ## start debug block -- gives user the steering wheel
# import code
# print("now entering interactive console. Press Ctrl-D to return to the script")
# code.interact(local=locals())
# ## end debug block